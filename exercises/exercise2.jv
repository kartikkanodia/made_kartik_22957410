// Create a pipeline 
// from a CSV file in the web 
// to a SQLite file sink.
pipeline DataPipeline {

    // Describe the structure of the pipeline
    // The output of the preceding block is hereby used 
    // as input for the succeeding block.
    // Pipes can be chained 
    // leading to an overview of the pipeline.

    DataExtractor
        -> DataTextFileInterpreter
        -> DataCSVInterpreter 
        -> DataTableInterpreter
        -> DataLoader;

    // Below the pipes, we define the blocks 
    // that are connected by the pipes.
    // Blocks instantiate a blocktype by using the oftype keyword.
    // The blocktype defines the available properties that the block
    // can use to specify the intended behavior of the block 
    block DataExtractor oftype HttpExtractor {
        // Properties are assigned to concrete values.
        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }

    // The HttpExtractor requires no input and produces a binary file as output.
    // This file has to be interpreted, e.g., as text file.
    block DataTextFileInterpreter oftype TextFileInterpreter { }

    // Next, we interpret the text file as sheet.
    // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block DataCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // As a next step, we interpret the sheet as a table by adding structure.
    // We define a valuetype per column that specifies the data type of the column.
    // Rows that include values that are not valid according to the their valuetypes are dropped automatically. 
    block DataTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "lfd_nr" oftype text,
            "stadtteil" oftype StateFilter,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype IdFilter,
            "baumfamilie" oftype text
        ];
    }

    // Load the table into a sink,
    // here into a sqlite file.
    block DataLoader oftype SQLiteLoader {
        table: "Trees";
        file: "./trees.sqlite";
    }


valuetype StateFilter oftype text {
    constraints: [
        StateAllowlist,
    ];
}

constraint StateAllowlist on text:
    value matches /^Furth-\w+/;


valuetype IdFilter oftype text {
    constraints: [
        IdAllowlist,
    ];
}

constraint IdAllowlist on text:
    value matches /\d{1,3}\.\d+, \d{1,3}\.\d+/;











}